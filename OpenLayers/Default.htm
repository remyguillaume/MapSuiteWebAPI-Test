<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Getting started with map</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <link rel="shortcut icon" href="favicon.ico">
    <link rel="apple-touch-icon" href="desktop.png">
    <meta name="apple-mobile-web-app-title" content="ThinkGeo Getting started" />
    <link href="Content/ol.css" rel="stylesheet" />
    <link href="Content/thinkgeo.openlayers.css" rel="stylesheet" />
    <link href="Content/Site.css" rel="stylesheet" />
</head>
<body>
    <div id="map-page">
        <div id="map">
            <div id="popup" class="ol-popup">
                <a href="#" id="popup-closer" class="ol-popup-closer"></a>
                <div id="popup-content"></div>
            </div>
            <div id="contextMenu" class="ol-menu">
                <a class="menu-item" href="#" onclick="centerHere();">Center map here</a>
                <div class="menu-separator"></div>
                <a class="menu-item" href="#" onclick="zoom(5);">Zoom to zoomlevel 5 (Country Level)</a>
                <a class="menu-item" href="#" onclick="zoom(8);">Zoom to zoomlevel 8 (State Level)</a>
                <a class="menu-item" href="#" onclick="zoom(12);">Zoom to zoomlevel 12 (City Level)</a>
                <a class="menu-item" href="#" onclick="zoom(17);">Zoom to zoomlevel 17 (Street Level)</a>
            </div>
        </div>
        <div id="tips">
            <ul>
                <li id="scale">Scale: 1:73,957,338</li>
                <li id="zoom">Zoom: 2</li>
            </ul>
        </div>
        <div id="coords"></div>
        <div id="locateError"></div>
    </div>
    <script src="Scripts/jquery-1.11.1.min.js"></script>
    <script src="http://openlayers.org/en/v3.14.1/build/ol.js"></script>
    <script src="thinkgeo.openlayers.js"></script>
    <script>
        
        // Mouse position coordinates
        var mousePositionControl = new ol.control.MousePosition({
            coordinateFormat: ol.coordinate.createStringXY(2),
            projection: 'EPSG:3857',
            target: document.getElementById('coords'),
            undefinedHTML: '&nbsp;'
        });

        // Anlage icons
        var iconStyle = new ol.style.Style({
            image: new ol.style.Icon(({
                anchor: [12, 28],
                anchorXUnits: 'pixels',
                anchorYUnits: 'pixels',
                opacity: 0.8,
                src: 'Images/icon.png'
            }))
        });
        var selectedIconStyle = new ol.style.Style({
            image: new ol.style.Icon(({
                anchor: [12, 28],
                anchorXUnits: 'pixels',
                anchorYUnits: 'pixels',
                opacity: 1,
                src: 'Images/selected.png'
            }))
        });

        // Create the openlayers map.
        var map = new ol.Map({
            controls: ol.control.defaults({
                attributionOptions: ({
                    collapsible: false
                })
            }).extend([mousePositionControl]),
            layers: [
                new ol.layer.Tile({
                    source: new ol.source.OSM()
                })
            ],

            // set the default extent
            target: 'map',
            view: new ol.View({
                center: ol.proj.fromLonLat([8.5, 47.7]),
                zoom: 8
            })
        });

        // Add WebAPI Feature Layer
        var geojsonVector = new ol.layer.Vector({
            source: new ol.source.Vector({
                projection: 'EPSG:3857',
                url: 'Feature/Anlage/all',
                format: new ol.format.GeoJSON()
            }),
            style: iconStyle,
        });

        //geojsonVector.events.on({
        //    featureselected: function (event) {
        //        var feature = event.feature;
        //        /*var id = feature.attributes.CFCC;
        //        var area = feature.geometry.getGeodesicArea();
        //        var output = feature.attributes.LANAME
        //            + " (" + id + ")" + " Area: " + area.toFixed(0) + " m2";
        //        document.getElementById("output-id").innerHTML = output;*/
        //    }
        //});

        map.addLayer(geojsonVector);

        // Add WebAPI Tile Layer
        getRootPath = function () {
            var pathArray = location.pathname.split('/');
            var appPath = "/";
            for (var i = 1; i < pathArray.length - 1; i++) {
                appPath += pathArray[i] + "/";
            }

            return appPath === "/" ? "" : appPath;
        };

        var xyzSource = new ol.source.XYZ({
            url: getRootPath() + 'Tile/Anlage/{z}/{x}/{y}',
            maxZoom: 19
        });

        xyzSource.tileLoadFunction = function (imageTile, src) {
            imageTile.getImage().src = src + '?t=' + new Date().getTime();;
        };

        map.addLayer(new ol.layer.Tile({
            source: xyzSource
        }));

        // Add image buttons for locate, full extent and help.
        var imgControls = new app.ImagesControl({
            imgs: [
                {
                    src: 'Images/location-inactive.png',
                    title: 'Locate',
                    callback: function () {
                        locate(this, 'location.png', 'location-inactive.png');
                    }
                },
                {
                    src: 'Images/full-extent.png',
                    title: 'Zoom to full extent',
                    callback: function () {
                        map.setView(new ol.View({ center: [-4.9158, -4.2187], zoom: 2 }));
                    }
                },
                {
                    src: 'Images/info.png',
                    title: 'Help',
                    callback: function () { window.open('http://unit.solutions', '_blank'); }
                }
            ]
        });
        map.addControl(imgControls);

        // Hook up the mouse-move event for showing current scale, zoomlevel and center point.
        map.on('moveend', function (e) {
            var mapView = this.getView();
            var zoom = mapView.getZoom();
            var scale = app.getScale(zoom);

            $('#scale').text('Scale: 1:' + Math.round(scale).toLocaleString());
            $('#zoom').text('Current ZoomLevel: ' + zoom);
        });
       
        // Create the popup based on the HTML elements.
        var container = document.getElementById('popup');
        var content = document.getElementById('popup-content');
        var closer = document.getElementById('popup-closer');
        // Hook up a click event to the "close" div for hiding the popup.
        closer.onclick = function () {
            container.style.display = 'none';
            closer.blur();
            return false;
        };

        // Create an overlay to anchor the popup to the map.
        var overlay = new ol.Overlay({
            element: container
        });
        map.addOverlay(overlay);

        // Hook up the map.click event to show a popup with current coordinates. 
        map.on('click', function (e) {

            var feature = map.forEachFeatureAtPixel(e.pixel, function (f, layer) {
                return f;
            });

            var x = Number(feature.get("X").replace(",", ".")).toFixed(2);
            var y = Number(feature.get("Y").replace(",", ".")).toFixed(2);
            var tooltip = "<table><tr><td class=\"h\">ID:</td><td class=\"v\">" + feature.get("ID") + "</td></tr><tr><td class=\"h\">Koordinaten:</td><td class=\"v\">" + x + " ; " + y + "</td></tr><tr><td class=\"h\">Beschreibung:</td><td class=\"v\">" + feature.get("KurzText") + "</td></tr><tr><td class=\"h\">Adresse:</td><td class=\"v\">" + feature.get("Adresse") + "</td></tr></table>";

            var coordinate = e.coordinate;
            overlay.setPosition(coordinate);
            content.innerHTML = tooltip;
            container.style.display = 'block';
        });

        var select = new ol.interaction.Select({
            condition: ol.events.condition.singleClick,
            style: selectedIconStyle
        });
        map.addInteraction(select);

        // Add context-menu to the map
        var menuContainer = document.getElementById('contextMenu');
        var menuContent = document.getElementById('contextMenu-content');
        var menuOverlay = new ol.Overlay({
            element: menuContainer
        });
        map.addOverlay(menuOverlay);
        map.getViewport().oncontextmenu = function (e) {
            e.preventDefault();

            var offsetx = e.clientX + 50;
            var offsety = e.clientY + 150;
            var menuPoint = map.getCoordinateFromPixel([offsetx, offsety]);
            menuOverlay.setPosition(menuPoint);
            menuContainer.style.display = 'block';
        };
        map.on('click', function () {
            menuContainer.style.display = "none";
        });

        // Get Geolocation. 
        var geolocation = new ol.Geolocation({
            projection: map.getView().getProjection(),
            tracking: false,
            trackingOptions: {
                maximumAge: 10000,
                enableHighAccuracy: true,
                timeout: 600000
            }
        });

        var source = new ol.source.Vector();
        var vector = new ol.layer.Vector({
            source: source,
            style: new ol.style.Style({
                fill: new ol.style.Fill({
                    color: 'rgba(19, 106, 236, .3)'
                }),
                stroke: new ol.style.Stroke({
                    color: '#136AEC',
                    width: 2
                }),
                image: new ol.style.Circle({
                    radius: 7,
                    fill: new ol.style.Fill({
                        color: '#2A93EE'
                    })
                })
            })
        });
        map.addLayer(vector);

        // Listen to position changes and show it on the map
        var accuracyFeature = new ol.Feature();
        var positionFeature = new ol.Feature();
        geolocation.on('change', function (evt) {
            var location = geolocation.getPosition();
            var accuracy = geolocation.getAccuracy();

            accuracyFeature = new ol.Feature(new ol.geom.Circle(location, accuracy));
            positionFeature = new ol.Feature(new ol.geom.Point(location));
            source.addFeatures([accuracyFeature, positionFeature]);

            map.getView().fitExtent(accuracyFeature.getGeometry().getExtent(), map.getSize());
        });
        geolocation.on('error', function (e) {
            $('#locateError').text('Failed to locate your position.');
        });

        // Change the style of "locate" icon on toolbar between active and deactive.
        locate = function (locateImg, activeImg, deactiveImg) {
            if ($(locateImg).hasClass('active')) {
                geolocation.setTracking(false);
                source.clear();

                locateImg.src = 'Images/' + deactiveImg;
                $(locateImg).removeClass('active');
            }
            else {
                geolocation.setTracking(true); // start position tracking

                locateImg.src = 'Images/' + activeImg;
                $(locateImg).addClass('active');
            }
        };

        var centerHere = function () {
            map.getView().setCenter(menuOverlay.getPosition());

            menuContainer.style.display = "none";
        };

        var zoom = function (zoomnum) {
            map.getView().setZoom(zoomnum);
            map.getView().setCenter(menuOverlay.getPosition());

            menuContainer.style.display = "none";
        };

    </script>
</body>
</html>
